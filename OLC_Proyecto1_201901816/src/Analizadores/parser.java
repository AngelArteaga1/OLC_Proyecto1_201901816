
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Application.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CodingErrorAction;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\013\000\002\003" +
    "\011\000\002\003\012\000\002\004\003\000\002\004\003" +
    "\000\002\006\007\000\002\006\010\000\002\010\005\000" +
    "\002\010\005\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\011\003\000\002\007\006\000\002\007\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\004\004\004\001\002\000\004\017\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\020\075\001\002\000\006\017\011\024\012\001" +
    "\002\000\004\020\065\001\002\000\004\025\061\001\002" +
    "\000\006\013\015\024\014\001\002\000\004\025\033\001" +
    "\002\000\004\013\016\001\002\000\004\013\017\001\002" +
    "\000\004\013\020\001\002\000\004\024\022\001\002\000" +
    "\006\005\027\024\026\001\002\000\004\020\023\001\002" +
    "\000\004\021\024\001\002\000\004\014\025\001\002\000" +
    "\006\005\ufff0\024\ufff0\001\002\000\004\020\030\001\002" +
    "\000\004\002\000\001\002\000\004\021\031\001\002\000" +
    "\004\014\032\001\002\000\006\005\uffef\024\uffef\001\002" +
    "\000\004\026\034\001\002\000\022\004\035\007\040\010" +
    "\045\011\037\012\043\015\044\021\041\022\036\001\002" +
    "\000\004\024\057\001\002\000\024\004\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\021\ufff2\022\ufff2" +
    "\001\002\000\022\004\035\007\040\010\045\011\037\012" +
    "\043\015\044\021\041\022\036\001\002\000\022\004\035" +
    "\007\040\010\045\011\037\012\043\015\044\021\041\022" +
    "\036\001\002\000\024\004\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\014\ufff1\015\ufff1\021\ufff1\022\ufff1\001\002\000" +
    "\004\014\053\001\002\000\022\004\035\007\040\010\045" +
    "\011\037\012\043\015\044\021\041\022\036\001\002\000" +
    "\022\004\035\007\040\010\045\011\037\012\043\015\044" +
    "\021\041\022\036\001\002\000\022\004\035\007\040\010" +
    "\045\011\037\012\043\015\044\021\041\022\036\001\002" +
    "\000\024\004\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014" +
    "\ufff4\015\ufff4\021\ufff4\022\ufff4\001\002\000\022\004\035" +
    "\007\040\010\045\011\037\012\043\015\044\021\041\022" +
    "\036\001\002\000\024\004\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\014\ufff9\015\ufff9\021\ufff9\022\ufff9\001\002\000" +
    "\024\004\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5" +
    "\015\ufff5\021\ufff5\022\ufff5\001\002\000\024\004\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\021\ufff7" +
    "\022\ufff7\001\002\000\006\013\ufffa\024\ufffa\001\002\000" +
    "\022\004\035\007\040\010\045\011\037\012\043\015\044" +
    "\021\041\022\036\001\002\000\024\004\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\021\ufff8\022\ufff8" +
    "\001\002\000\024\004\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\014\ufff6\015\ufff6\021\ufff6\022\ufff6\001\002\000\004" +
    "\005\060\001\002\000\024\004\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\014\ufff3\015\ufff3\021\ufff3\022\ufff3\001\002" +
    "\000\004\026\062\001\002\000\022\004\035\007\040\010" +
    "\045\011\037\012\043\015\044\021\041\022\036\001\002" +
    "\000\004\014\064\001\002\000\006\013\ufffb\024\ufffb\001" +
    "\002\000\004\024\066\001\002\000\004\025\067\001\002" +
    "\000\004\026\070\001\002\000\006\027\071\030\072\001" +
    "\002\000\004\014\ufffd\001\002\000\004\014\ufffc\001\002" +
    "\000\004\014\074\001\002\000\006\017\ufffe\024\ufffe\001" +
    "\002\000\004\024\076\001\002\000\004\025\077\001\002" +
    "\000\004\026\100\001\002\000\006\027\071\030\072\001" +
    "\002\000\004\014\102\001\002\000\006\017\uffff\024\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\004\002\004\001\001\000\004\003\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\041\011\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\055" +
    "\011\045\001\001\000\006\010\053\011\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\051\011\045" +
    "\001\001\000\006\010\050\011\045\001\001\000\006\010" +
    "\046\011\045\001\001\000\002\001\001\000\006\010\047" +
    "\011\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\054\011\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\062" +
    "\011\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\100\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public static int contId=1;
    public static Nodo Raiz;
    public static int num = 1;
    public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        //String data;
        //File archivo;
        //FileOutputStream salida;
        try {
            System.out.println("****************************");
            fichero = new FileWriter("arboles/" + nombre + ".dot");
            //archivo = new File("arboles/" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            System.out.println("digraph G{");
            //data = "digraph G{\n";
            pw.println("rankdir=UD");
            System.out.println("rankdir=UD");
            //data = data + "rankdir=UD\n";
            pw.println("node[shape=record]");
            System.out.println("node[shape=record]");
            //data = data + "node[shape=box]\n";
            pw.println("concentrate=true");
            System.out.println("concentrate=true");
            //data = data + "concentrate=true\n";
            pw.println(act.getCodigoInterno());
            System.out.println(act.getCodigoInterno());
            //data = data + act.getCodigoInterno();
            pw.println("}");
            System.out.println("}");
            //data = data + "}";
            //System.out.println(data);
            //salida = new FileOutputStream(archivo);
            //new OutputStreamWriter(archivo, "utf-8");
            //CharsetEncoder encoder = Charset.forName("utf-8").newEncoder(); 
            //encoder.onMalformedInput(CodingErrorAction.REPORT); 
            //encoder.onUnmappableCharacter(CodingErrorAction.REPORT); 
            //BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("arboles/" + nombre + ".dot"),encoder));
            //out.write("verga de oso");
            //out.close();
            //byte[] txt = data.getBytes();
            //salida.write(txt);
            //out.write("data");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "arboles/" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "arboles/" + nombre + ".dot";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        //System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        App.TxtSalida.append("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error.\n" );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        //System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        App.TxtSalida.append("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.\n");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------------------------


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TKParA CUERPO EXPRESION TKPorcentaje TKPorcentaje TKPorcentaje TKPorcentaje DEFINICION TKParC 
            {
              String RESULT =null;
		System.err.println("CORRECTO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= TKConj TKDosPuntos identificador TKGuion TKMayor CONJUNTO TKPuntoComa 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= CUERPO TKConj TKDosPuntos identificador TKGuion TKMayor CONJUNTO TKPuntoComa 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONJUNTO ::= conjunto 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONJUNTO ::= conjuntoExp 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPRESION ::= identificador TKGuion TKMayor ARBOL TKPuntoComa 
            {
              String RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //PARA EL CALCULO DE PRIMEROS
                int[] primeros1 = new int[1];
                primeros1[0] = parser.num;
                //PARA EL CALCULO DE ULTIMOS
                int[] ultimos1 = new int[1];
                ultimos1[0] = parser.num;
                Nodo fin = new Nodo(null, null, "#", parser.contId,parser.num, "N", primeros1, ultimos1);
                parser.contId++;

                //PARA EL CALCULO DE PRIMEROS
                int [] primeros;
                if (valor.anulable == "A"){
                    primeros = new int[valor.primeros.length + fin.primeros.length];
                    int j = 0;
                    for (int i = 0; i < primeros.length; i++){
                        if (i < valor.primeros.length){
                            primeros[i] = valor.primeros[i];
                        } else {
                            primeros[i] = fin.primeros[j];
                            j++;
                        }
                    }
                } else {
                    primeros = valor.primeros;
                }
                //PARA EL CALCULO DE ULTIMOS
                int [] ultimos;
                if (fin.anulable == "A"){
                    ultimos = new int[valor.ultimos.length + fin.ultimos.length];
                    int j = 0;
                    for (int i = 0; i < ultimos.length; i++){
                        if (i < valor.ultimos.length){
                            ultimos[i] = valor.ultimos[i];
                        } else {
                            ultimos[i] = fin.ultimos[j];
                            j++;
                        }
                    }
                } else {
                    ultimos = fin.ultimos;
                }
                //PARA EL CALCULO DE ANULABLES
                String anulable;
                if (fin.anulable == "A" && valor.anulable == "A"){
                    anulable = "A";
                } else {
                    anulable = "N";
                }
                
                Nodo raiz = new Nodo(valor, fin, ".", parser.contId,0, anulable, primeros, ultimos);
                parser.Raiz = raiz;
                
                System.err.println("hola bb");

                graficarArbol(raiz, nombre);
                parser.num = 1;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPRESION ::= EXPRESION identificador TKGuion TKMayor ARBOL TKPuntoComa 
            {
              String RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //PARA EL CALCULO DE PRIMEROS
                int[] primeros1 = new int[1];
                primeros1[0] = parser.num;
                //PARA EL CALCULO DE ULTIMOS
                int[] ultimos1 = new int[1];
                ultimos1[0] = parser.num;
                Nodo fin = new Nodo(null, null, "#", parser.contId,parser.num, "N", primeros1, ultimos1);
                parser.contId++;

                //PARA EL CALCULO DE PRIMEROS
                int [] primeros;
                if (valor.anulable == "A"){
                    primeros = new int[valor.primeros.length + fin.primeros.length];
                    int j = 0;
                    for (int i = 0; i < primeros.length; i++){
                        if (i < valor.primeros.length){
                            primeros[i] = valor.primeros[i];
                        } else {
                            primeros[i] = fin.primeros[j];
                            j++;
                        }
                    }
                } else {
                    primeros = valor.primeros;
                }
                //PARA EL CALCULO DE ULTIMOS
                int [] ultimos;
                if (fin.anulable == "A"){
                    ultimos = new int[valor.ultimos.length + fin.ultimos.length];
                    int j = 0;
                    for (int i = 0; i < ultimos.length; i++){
                        if (i < valor.ultimos.length){
                            ultimos[i] = valor.ultimos[i];
                        } else {
                            ultimos[i] = fin.ultimos[j];
                            j++;
                        }
                    }
                } else {
                    ultimos = fin.ultimos;
                }
                //PARA EL CALCULO DE ANULABLES
                String anulable;
                if (fin.anulable == "A" && valor.anulable == "A"){
                    anulable = "A";
                } else {
                    anulable = "N";
                }
                
                Nodo raiz = new Nodo(valor, fin, ".", parser.contId,0, anulable, primeros, ultimos);
                parser.Raiz = raiz;
                
                System.err.println("hola bb");

                graficarArbol(raiz, nombre);
                parser.num = 1;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARBOL ::= TKPunto ARBOL ARBOL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //PARA EL CALCULO DE PRIMEROS
            int [] primeros;
            if (a.anulable == "A"){
                primeros = new int[a.primeros.length + b.primeros.length];
                int j = 0;
                for (int i = 0; i < primeros.length; i++){
                    if (i < a.primeros.length){
                        primeros[i] = a.primeros[i];
                    } else {
                        primeros[i] = b.primeros[j];
                        j++;
                    }
                }
            } else {
                primeros = a.primeros;
            }

            //PARA EL CALCULO DE ULTIMOS
            int [] ultimos;
            if (b.anulable == "A"){
                ultimos = new int[a.ultimos.length + b.ultimos.length];
                int j = 0;
                for (int i = 0; i < ultimos.length; i++){
                    if (i < a.ultimos.length){
                        ultimos[i] = a.ultimos[i];
                    } else {
                        ultimos[i] = b.ultimos[j];
                        j++;
                    }
                }
            } else {
                ultimos = b.ultimos;
            }
            
            //PARA EL CALCULO DE ANULABLES
            String anulable;
            if (a.anulable == "A" && b.anulable == "A"){
                anulable = "A";
            } else {
                anulable = "N";
            }
            Nodo NuevoPadre = new Nodo(a,b,".",parser.contId,0, anulable, primeros, ultimos);
            parser.contId++;
            RESULT = NuevoPadre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARBOL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ARBOL ::= TKBarra ARBOL ARBOL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //PARA EL CALCULO DE PRIMEROS
            int[] primeros = new int[a.primeros.length + b.primeros.length];
            int j = 0;
            for (int i = 0; i < primeros.length; i++){
                if (i < a.primeros.length){
                    primeros[i] = a.primeros[i];
                } else {
                    primeros[i] = b.primeros[j];
                    j++;
                }
            }
            //CALCULOS DE ULTIMOS
            int[] ultimos = new int[a.ultimos.length + b.ultimos.length];
            j = 0;
            for (int i = 0; i < ultimos.length; i++){
                if (i < a.ultimos.length){
                    ultimos[i] = a.ultimos[i];
                } else {
                    ultimos[i] = b.ultimos[j];
                    j++;
                }
            }
            //PARA EL CALCULO DE ANULABLES
            String anulable;
            if (a.anulable == "A" || b.anulable == "A"){
                anulable = "A";
            } else {
                anulable = "N";
            }
            Nodo NuevoPadre = new Nodo(a,b,"\\|",parser.contId,0, anulable, primeros, ultimos);
            parser.contId++;
            RESULT = NuevoPadre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARBOL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ARBOL ::= TKAsterisco ARBOL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //CALCULOS DE PRIMEROS
            int[] primeros = a.primeros;
            //CALCULOS DE ULTIMOS
            int[] ultimos = a.ultimos;
            Nodo NuevoPadre = new Nodo(a,null,"*",parser.contId,0, "A", primeros, ultimos);
            parser.contId++;
            RESULT = NuevoPadre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARBOL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ARBOL ::= TKMas ARBOL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //PARA EL CALCULO DE PRIMEROS
            int[] primeros = a.primeros;
            //CALCULOS DE ULTIMOS
            int[] ultimos = a.ultimos;
            //PARA EL CALCULO DE ANULABLES
            String anulable;
            if(a.anulable == "N"){
                anulable = "N";
            } else {
                anulable = "A";
            }
            Nodo NuevoPadre = new Nodo(a,null,"+",parser.contId,0, anulable, primeros, ultimos);
            parser.contId++;
            RESULT = NuevoPadre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARBOL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARBOL ::= TKInterrogacion ARBOL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //PARA EL CALCULO DE PRIMEROS
            int[] primeros = a.primeros;
            //CALCULOS DE ULTIMOS
            int[] ultimos = a.ultimos;
            Nodo NuevoPadre = new Nodo(a,null,"?",parser.contId,0, "A", primeros, ultimos);
            parser.contId++;
            RESULT = NuevoPadre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARBOL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARBOL ::= HOJAS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARBOL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // HOJAS ::= TKParA identificador TKParC 
            {
              Nodo RESULT =null;
		int val0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //PARA EL CALCULO DE PRIMEROS
            int[] primeros = new int[1];
            primeros[0] = parser.num;
            //PARA EL CALCULO DE PRIMEROS
            int[] ultimos = new int[1];
            ultimos[0] = parser.num;
            Nodo NuevaHoja = new Nodo(null,null,val0+val+val1,parser.contId,parser.num, "N", primeros, ultimos);
            parser.contId++;
            parser.num++;
            RESULT = NuevaHoja;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HOJAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // HOJAS ::= caracterespecial 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //PARA EL CALCULO DE PRIMEROS
            int[] primeros = new int[1];
            primeros[0] = parser.num;
            //PARA EL CALCULO DE PRIMEROS
            int[] ultimos = new int[1];
            ultimos[0] = parser.num;
            Nodo NuevaHoja = new Nodo(null,null,val,parser.contId,parser.num, "N", primeros, ultimos);
            parser.contId++;
            parser.num++;
            RESULT = NuevaHoja;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HOJAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // HOJAS ::= cadena 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //String caracter = val.substring(1,1);
            /*String cadena = "";
            for (int i = 0; i<val.length(); i++){
                if (val.charAt(i) != '"'){
                    cadena = cadena + val.charAt(i);
                }
            }*/

            //PARA EL CALCULO DE PRIMEROS
            int[] primeros = new int[1];
            primeros[0] = parser.num;
            //PARA EL CALCULO DE PRIMEROS
            int[] ultimos = new int[1];
            ultimos[0] = parser.num;
            Nodo NuevaHoja = new Nodo(null,null,val,parser.contId,parser.num, "N", primeros, ultimos);
            parser.contId++;
            parser.num++;
            RESULT = NuevaHoja;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HOJAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFINICION ::= identificador TKDosPuntos cadena TKPuntoComa 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFINICION ::= DEFINICION identificador TKDosPuntos cadena TKPuntoComa 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
